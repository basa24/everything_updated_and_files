# -*- coding: utf-8 -*-
"""Merging dfs and comparing classes

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iQkPoyB97RTXrxRcULZmm-qCZc1PWYZg
"""

import pandas as pd

# Replace 'your_file.csv' with the path to your actual CSV file
csv_file_path = '/content/class_metrics_frcnn.xlsx - Sheet1.csv'
df_fasterrcnn = pd.read_csv(csv_file_path)

# Display the first few rows of the DataFrame
print(df_fasterrcnn)

csv_file_path = '/content/class_metrics_yolo.xlsx - Sheet1.csv'
df_yolo = pd.read_csv(csv_file_path)
print(df_yolo)

csv_file_path = '/content/yoloap - Sheet1.csv'
df_yolo_ap = pd.read_csv(csv_file_path)

df_yolo_ap

csv_file_path = '/content/frcnnap - Sheet1.csv'
df_frcnn_ap = pd.read_csv(csv_file_path)

df_fasterrcnn = df_fasterrcnn.merge(df_frcnn_ap, how='left', left_on='Class', right_on='class_name')

# The merge operation creates an 'AP' column in df_yolo with the matching AP values
# Optionally, you can rename this column to 'AP value' if you want
df_fasterrcnn.rename(columns={'AP': 'AP value'}, inplace=True)

# If you don't want to keep the 'class_name' column from df_yolo_ap, you can drop it
df_fasterrcnn.drop(columns='class_name', inplace=True)
df_fasterrcnn



df_yolo = df_yolo.merge(df_yolo_ap, how='left', left_on='Class', right_on='class_name')

# The merge operation creates an 'AP' column in df_yolo with the matching AP values
# Optionally, you can rename this column to 'AP value' if you want
df_yolo.rename(columns={'AP': 'AP value'}, inplace=True)

# If you don't want to keep the 'class_name' column from df_yolo_ap, you can drop it
df_yolo.drop(columns='class_name', inplace=True)
df_yolo

import pandas as pd
import numpy as np

# Assuming df_fasterrcnn and df_yolo are already prepared and contain 'Class' and 'AP value' columns
# First, fill NaN AP values with 0 in both DataFrames
df_fasterrcnn['AP value'] = df_fasterrcnn['AP value'].fillna(0)
df_yolo['AP value'] = df_yolo['AP value'].fillna(0)

# Merge the two DataFrames on 'Class' to align them for direct comparison
df_merged = pd.merge(df_fasterrcnn[['Class', 'AP value']], df_yolo[['Class', 'AP value']], on='Class', suffixes=('_fasterrcnn', '_yolo'))
# Convert 'AP value' columns to numeric types, coercing errors to NaN, then filling NaNs with 0
df_merged['AP value_fasterrcnn'] = pd.to_numeric(df_merged['AP value_fasterrcnn'], errors='coerce').fillna(0)
df_merged['AP value_yolo'] = pd.to_numeric(df_merged['AP value_yolo'], errors='coerce').fillna(0)

# Now you can safely perform the comparison without encountering a TypeError
conditions = [
    df_merged['AP value_fasterrcnn'] > df_merged['AP value_yolo'],
    df_merged['AP value_fasterrcnn'] < df_merged['AP value_yolo']
]

choices = [
    'Faster RCNN > YOLOv8',
    'Faster RCNN < YOLOv8'
]

df_merged['AP_comparison'] = np.select(conditions, choices, default='Faster RCNN = YOLOv8')

# Creating a new DataFrame with just 'Class' and 'AP_comparison'
df_ap_comparison = df_merged[['Class', 'AP_comparison']]

# Display the DataFrame for verification
df_ap_comparison

import pandas as pd

# Assuming df_fasterrcnn and df_yolo are already defined DataFrames like the example you provided
# and they both have columns ['Class', 'Precision', 'Recall', 'F1 Score', 'TP', 'FP', 'FN', 'Average IoU']

# Merge the two DataFrames on 'Class' to ensure direct class-by-class comparison
df_comparison = pd.merge(df_fasterrcnn, df_yolo, on='Class', suffixes=('_fasterrcnn', '_yolo'))

# Find classes where Faster R-CNN has higher recall than YOLOv8
classes_better_recall_faster_rcnn = df_comparison[df_comparison['Recall_fasterrcnn'] > df_comparison['Recall_yolo']]['Class']

# Find classes where YOLOv8 has higher recall than Faster R-CNN
classes_better_recall_yolo = df_comparison[df_comparison['Recall_fasterrcnn'] < df_comparison['Recall_yolo']]['Class']

# Find classes where Faster R-CNN has a recall of 0
classes_recall_0_fasterrcnn = df_comparison[df_comparison['Recall_fasterrcnn'] == 0]['Class']

# Printing the results
print("Classes where Faster R-CNN has a higher recall than YOLOv8:")
print(classes_better_recall_faster_rcnn.to_list())
print(f"Total: {len(classes_better_recall_faster_rcnn)} classes")

print("\nClasses where YOLOv8 has a higher recall than Faster R-CNN:")
print(classes_better_recall_yolo.to_list())
print(f"Total: {len(classes_better_recall_yolo)} classes")

print("\nClasses where Faster R-CNN has a recall of 0:")
print(classes_recall_0_fasterrcnn.to_list())
print(f"Total: {len(classes_recall_0_fasterrcnn)} classes")


# Assuming df_fasterrcnn and df_yolo are your DataFrames for Faster R-CNN and YOLO models, respectively
# First, merge the two dataframes on 'Class' to align them
df_merged = pd.merge(df_fasterrcnn, df_yolo, on='Class', suffixes=('_fasterrcnn', '_yolo'))

# Then, find classes where recall values are equal
classes_equal_recall = df_merged[df_merged['Recall_fasterrcnn'] == df_merged['Recall_yolo']]['Class']

# Printing the results
print("Classes where recall is equal between Faster R-CNN and YOLOv8:")
classes_list = classes_equal_recall.to_list()
print(classes_list)
print(f"Total classes with equal recall: {len(classes_list)}")

import pandas as pd

# Assuming df_fasterrcnn and df_yolo are your existing DataFrames

# Step 1: Merge the two DataFrames on the 'Class' column
df_comparison = pd.merge(df_fasterrcnn[['Class', 'Recall']], df_yolo[['Class', 'Recall']], on='Class', suffixes=('_fasterrcnn', '_yolo'))

# Step 2: Determine where Faster R-CNN has higher, lower, or equal recall compared to YOLOv8
df_comparison['Comparison'] = df_comparison.apply(
    lambda row: 'Faster R-CNN > YOLOv8' if row['Recall_fasterrcnn'] > row['Recall_yolo']
    else ('Faster R-CNN < YOLOv8' if row['Recall_fasterrcnn'] < row['Recall_yolo']
          else 'Equal Recall'),
    axis=1
)

# Step 3: For additional insights, let's add a column to identify where Faster R-CNN recall is 0
df_comparison['Faster R-CNN Recall 0'] = df_comparison['Recall_fasterrcnn'].apply(lambda x: x == 0)

# Display the final DataFrame
df_comparison

import pandas as pd

# Assuming df_fasterrcnn and df_yolo are already defined DataFrames
# and they both have columns ['Class', 'Precision', 'Recall', 'F1 Score', 'TP', 'FP', 'FN', 'Average IoU']

# Merge the two DataFrames on 'Class' for direct class-by-class comparison
df_comparison = pd.merge(df_fasterrcnn, df_yolo, on='Class', suffixes=('_fasterrcnn', '_yolo'))

# Find classes where Faster R-CNN has higher precision than YOLOv8
classes_better_precision_faster_rcnn = df_comparison[df_comparison['Precision_fasterrcnn'] > df_comparison['Precision_yolo']]['Class']

# Find classes where YOLOv8 has higher precision than Faster R-CNN
classes_better_precision_yolo = df_comparison[df_comparison['Precision_fasterrcnn'] < df_comparison['Precision_yolo']]['Class']

# Find classes where Faster R-CNN has a precision of 0
classes_precision_0_fasterrcnn = df_comparison[df_comparison['Precision_fasterrcnn'] == 0]['Class']

# Printing the results
print("Classes where Faster R-CNN has a higher precision than YOLOv8:")
print(classes_better_precision_faster_rcnn.to_list())
print(f"Total: {len(classes_better_precision_faster_rcnn)} classes")

print("\nClasses where YOLOv8 has a higher precision than Faster R-CNN:")
print(classes_better_precision_yolo.to_list())
print(f"Total: {len(classes_better_precision_yolo)} classes")

print("\nClasses where Faster R-CNN has a precision of 0:")
print(classes_precision_0_fasterrcnn.to_list())
print(f"Total: {len(classes_precision_0_fasterrcnn)} classes")

# For equal precision values
classes_equal_precision = df_comparison[df_comparison['Precision_fasterrcnn'] == df_comparison['Precision_yolo']]['Class']
print("\nClasses where precision is equal between Faster R-CNN and YOLOv8:")
print(classes_equal_precision.to_list())
print(f"Total classes with equal precision: {len(classes_equal_precision)}")

# Assuming df_fasterrcnn and df_yolo are your existing DataFrames

# Step 1: Merge the two DataFrames on the 'Class' column for precision comparison
df_comparison_precision = pd.merge(df_fasterrcnn[['Class', 'Precision']], df_yolo[['Class', 'Precision']], on='Class', suffixes=('_fasterrcnn', '_yolo'))

# Step 2: Determine where Faster R-CNN has higher, lower, or equal precision compared to YOLOv8
df_comparison_precision['Comparison'] = df_comparison_precision.apply(
    lambda row: 'Faster R-CNN > YOLOv8' if row['Precision_fasterrcnn'] > row['Precision_yolo']
    else ('Faster R-CNN < YOLOv8' if row['Precision_fasterrcnn'] < row['Precision_yolo']
          else 'Equal Precision'),
    axis=1
)

# Step 3: For additional insights, let's add a column to identify where Faster R-CNN precision is 0
df_comparison_precision['Faster R-CNN Precision 0'] = df_comparison_precision['Precision_fasterrcnn'].apply(lambda x: x == 0)

df_comparison_precision

import pandas as pd

# Assuming df_fasterrcnn and df_yolo are your existing DataFrames

# Step 1: Merge the two DataFrames on the 'Class' column for both precision and recall
df_merged_precision = pd.merge(df_fasterrcnn[['Class', 'Precision']], df_yolo[['Class', 'Precision']], on='Class', suffixes=('_fasterrcnn', '_yolo'))
df_merged_recall = pd.merge(df_fasterrcnn[['Class', 'Recall']], df_yolo[['Class', 'Recall']], on='Class', suffixes=('_fasterrcnn', '_yolo'))

# Step 2: Determine comparisons for precision
df_merged_precision['Precision_Comparison'] = df_merged_precision.apply(
    lambda row: 'Faster R-CNN > YOLOv8' if row['Precision_fasterrcnn'] > row['Precision_yolo']
    else ('Faster R-CNN < YOLOv8' if row['Precision_fasterrcnn'] < row['Precision_yolo']
          else 'Equal Precision'),
    axis=1
)

# Step 3: Determine comparisons for recall
df_merged_recall['Recall_Comparison'] = df_merged_recall.apply(
    lambda row: 'Faster R-CNN > YOLOv8' if row['Recall_fasterrcnn'] > row['Recall_yolo']
    else ('Faster R-CNN < YOLOv8' if row['Recall_fasterrcnn'] < row['Recall_yolo']
          else 'Equal Recall'),
    axis=1
)

# Step 4: Merge the precision and recall comparisons into one DataFrame
df_final_comparison = pd.merge(df_merged_precision[['Class', 'Precision_Comparison']], df_merged_recall[['Class', 'Recall_Comparison']], on='Class')

# Optional Step 5: Add columns to identify where Faster R-CNN precision or recall is 0
df_final_comparison['Faster R-CNN Precision 0'] = df_merged_precision['Precision_fasterrcnn'] == 0
df_final_comparison['Faster R-CNN Recall 0'] = df_merged_recall['Recall_fasterrcnn'] == 0

# Display the final DataFrame
df_final_comparison

df_final_comparison.to_excel('my_dataframe.xlsx', index=False)
from google.colab import files
files.download('my_dataframe.xlsx')